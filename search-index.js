var searchIndex = new Map(JSON.parse('[["rust_patterns",{"t":"CCCQCFNNNNNNNHHNNNNNCIJJKFOHNNNHNNMHNOMMNNNNIIIFKNNNNNNMNMNMNNMNNNONNNNN","n":["encapsulation","hashing","plugins","registered_item_impl","type_erased_api","Xxh3Hasher128","borrow","borrow_mut","default","finish","finish_u128","from","into","one_shot_128","one_shot_64","try_from","try_into","type_id","vzip","write","item_registry","BxRegisteredItem","NEXT_ITEM_INDEX","REGISTERED_ITEMS","RegisteredItem","RegisteredItems","_phantom","add_to_registry","borrow","borrow_mut","from","get_data_plugin_count","get_item","get_item_mut","index","initialize_item_index","into","items","name","new_boxed","try_from","try_into","type_id","vzip","BxIndex","EntityId","HashValue","Index","TypeErasedIndex","borrow","borrow_mut","default","from","get","get_mut","get_with_hash","","get_with_hash_mut","","has_hash","","insert_entity","insert_entity_with_hash","","insert_value","into","lookup","new","try_from","try_into","type_id","vzip"],"q":[[0,"rust_patterns"],[5,"rust_patterns::hashing"],[20,"rust_patterns::plugins"],[21,"rust_patterns::plugins::item_registry"],[44,"rust_patterns::type_erased_api"],[72,"core::hash"],[73,"core::result"],[74,"core::any"],[75,"std::sync::poison::mutex"],[76,"std::sync::lazy_lock"],[77,"core::marker"],[78,"core::sync::atomic"],[79,"alloc::vec"],[80,"alloc::boxed"],[81,"core::default"],[82,"core::cmp"],[83,"core::clone"],[84,"std::collections::hash::set"],[85,"core::option"],[86,"hashbrown::table"]],"i":"``````f000000``00000``````Al`000`00Bb`11001111`````Bl00000Cl1010110111111111","f":"``````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{}f}{{{b{f}}}h}{fj}{cc{}}{{}c{}}{{{b{c}}}jl}{{{b{c}}}hl}{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{bA`}{{}c{}}{{{b{df}}{b{{Ad{Ab}}}}}Af}``{{}Ah}{{}Aj}``{AlAn}{{}B`}{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}>2{{{b{Al}}}{{b{c}}}Bb}{{{b{dAl}}}{{b{dc}}}Bb}4{{{b{Bd}}}B`}{{}c{}}{AlBf}{{}{{b{Bh}}}}{{}{{Bj{Bb}}}}{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{bA`}{{}c{}}`````<;{{}{{Bl{c}}}{BnlC`CbCd}}{cc{}}{{{b{{Bl{c}}}}{b{c}}}{{Cj{{b{{Ch{Cf}}}}}}}{lC`CbCd}}{{{b{d{Bl{c}}}}{b{c}}}{{Cj{{b{d{Ch{Cf}}}}}}}{lC`CbCd}}{{{b{Cl}}Cn}{{Cj{{b{{Ch{Cf}}}}}}}}{{{b{{Bl{c}}}}Cn}{{Cj{{b{{Ch{Cf}}}}}}}{lC`CbCd}}{{{b{dCl}}Cn}{{Cj{{b{d{Ch{Cf}}}}}}}}{{{b{d{Bl{c}}}}Cn}{{Cj{{b{d{Ch{Cf}}}}}}}{lC`CbCd}}{{{b{Cl}}Cn}D`}{{{b{{Bl{c}}}}Cn}D`{lC`CbCd}}{{{b{d{Bl{c}}}}{b{c}}Cf}D`{lC`CbCd}}{{{b{dCl}}CnCf}{{n{D`Af}}}}{{{b{d{Bl{c}}}}CnCf}{{n{D`Af}}}{lC`CbCd}}{{{b{d{Bl{c}}}}c{Ch{Cf}}}{{Dd{{Db{c{Ch{Cf}}}}}}}{lC`CbCd}}{{}c{}}{BlDf}{{}{{Bl{c}}}{lC`CbCd}}{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{bA`}{{}c{}}","D":"Df","p":[[1,"reference",null,null,1],[0,"mut"],[5,"Xxh3Hasher128",5],[1,"u64"],[1,"u128"],[10,"Hash",72],[6,"Result",73,null,1],[5,"TypeId",74],[1,"u8"],[1,"slice"],[1,"unit"],[5,"Mutex",75],[5,"LazyLock",76],[5,"RegisteredItems",21],[5,"PhantomData",77],[1,"usize"],[10,"RegisteredItem",21],[5,"AtomicUsize",78],[5,"Vec",79],[1,"str"],[5,"Box",80,null,1],[5,"Index",44],[10,"Default",81],[10,"Eq",82],[10,"Clone",83],[10,"Any",74],[8,"EntityId",44],[5,"HashSet",84],[6,"Option",85,null,1],[10,"TypeErasedIndex",44],[8,"HashValue",44],[1,"bool"],[1,"tuple",null,null,1],[5,"OccupiedEntry",86],[5,"HashTable",86]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAACUADgAAAAEABgAFAA4ABgAaAAEAHQABACAAAAApAAMALgABADIAAgA5AAAAOwAAAD0AAABAAAAARAAEAA==","P":[[6,"T"],[8,""],[11,"T"],[12,"U"],[13,"T"],[15,"U,T"],[16,"U"],[17,""],[18,"V"],[19,""],[28,"T"],[31,""],[32,"R"],[34,""],[36,"U"],[37,""],[40,"U,T"],[41,"U"],[42,""],[43,"V"],[49,"T"],[55,""],[56,"T"],[57,""],[58,"T"],[59,""],[60,"T"],[62,""],[63,"T"],[65,"U"],[66,""],[67,"T"],[68,"U,T"],[69,"U"],[70,""],[71,"V"]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[3577]}