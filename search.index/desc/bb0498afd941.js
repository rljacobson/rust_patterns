rd_("EkReturns a <strong>copy</strong> of the element at <code>index</code>, if any. Panics if \xe2\x80\xa6DfFetches an immutable reference to the item <code>R</code> from the \xe2\x80\xa6CnGets an immutable reference to the set associated with the \xe2\x80\xa6AkCurrent number of elements.DgCreates a new <code>RegisteredItems</code> instance, allocating the \xe2\x80\xa6BgCreates an empty <code>ValueVec</code>.EiPops and <strong>returns</strong> the last element (by move), or <code>None</code> if \xe2\x80\xa6AoReturns the argument unchanged.000D`Wraps an existing <code>Vec</code> without copying its elements.1BaCalls <code>U::from(self)</code>.0000AiConvenient for debugging.BfPushes a value (by move) onto the end.CkIn the most boring, typical case, a trait is completely \xe2\x80\xa6CfThe trait is public, but the super trait is NOT publicBeThe typed <code>Index&lt;T&gt;</code>AdClears all elements.AlCan implement a trait methodCmImplementors will need to supply their own implementation \xe2\x80\xa6kOverridableDbThe index of the item in the <code>RegisteredItem</code> list, \xe2\x80\xa6C`A struct we might want to implement a trait for.EgThe Seal trait is <code>pub</code> but lives inside the private <code>sealed</code> \xe2\x80\xa6CjExtends the vector by moving in elements from an iterator.EgInserts <code>value</code> at position <code>index</code>, shifting elements to the \xe2\x80\xa6ClWe store a copy of the value here so that we can iterate \xe2\x80\xa6DcRemoves and returns the element at <code>index</code>, shifting \xe2\x80\xa6DjThe <code>sealed</code> module is private to this crate, and only this \xe2\x80\xa6EfReturns a <strong>snapshot</strong> <code>Vec&lt;V&gt;</code> by cloning all elements.DgA \xe2\x80\x9cboxed\xe2\x80\x9d <code>TypeErasedIndex</code>, use anywhere you need a \xe2\x80\xa6DcFetches a mutable reference to the item <code>R</code> from the \xe2\x80\xa6DkGets a mutable reference to the set associated with the <code>key</code>\xe2\x80\xa6AkCan override a trait methodCiThis default implementation is visible, callable, and \xe2\x80\xa6ClHiding the Backing Implementation of Algorithms and Data \xe2\x80\xa6AfPlugin Systems in RustDhMoves a value into the slot at <code>index</code>, returning the old \xe2\x80\xa6DdEnsures capacity for at least <code>additional</code> more elements.CiA by-value, ref-less vector with interior mutability. \xe2\x80\xa6BdCurrent capacity of the backing Vec.EgReturns <code>true</code> if the <code>ValueVec</code> contains an element with the \xe2\x80\xa6BfDoes the index contain the given hash?BkReturns true if the vector has no elements.CnApplies <code>f</code> with exclusive access to the inner Vec.BcCreates a new instance of the item.DnReturns a <strong>clone</strong> of the element at <code>index</code>, if any.DeSwaps the value at <code>index</code> with the provided one in place.AgNot overridable (final)DhRemoves and returns the element at <code>index</code> by swapping in \xe2\x80\xa6CiInserting a new <em>value</em> requires the value itself.Dm<code>ValueVec&lt;T&gt;</code>: a by-value, ref-less vector with interior \xe2\x80\xa6BfFetching a set only requires the hash.DdInserts an entity into the set associated with <code>key</code>, \xe2\x80\xa6AdThe Registry PatternAiRust Programming PatternsCjFine-grained Encapsulation and Information Hiding with \xe2\x80\xa6BiShrinks the capacity as much as possible.AfCreates with capacity.DfA trait for items that can be registered (<code>DataPlugin</code>, \xe2\x80\xa6ClGlobal item index counter, keeps track of the index that \xe2\x80\xa6CjA wrapper around a vector of <code>RegisteredItem</code>s.BlThis trait Encapsulates the type-erased API.CnAdds a new item to the registry. The job of this method is \xe2\x80\xa6oData StructuresAiTyped and Type-Erased APIBcA boxed <code>RegisteredItem</code>ClFor simple applications, just knowing how many items are \xe2\x80\xa6?CdThis macro ensures correct implementation of the \xe2\x80\xa6CnEncapsulates the synchronization logic for initializing an \xe2\x80\xa6CaInformation Hiding, Encapsulation, and Shared \xe2\x80\xa6CnInserting a new entity only requires the hash but requires \xe2\x80\xa6BlAn accessor for <code>NEXT_ITEM_INDEX</code>")