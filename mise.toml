[vars]
core_package = "rust_patterns"


[tools]
node = "latest"
pnpm = "latest"
"pipx:pre-commit" = "4.3.0"
"prettier" = "3.6.2"
"npm:markdownlint-cli" = "0.45.0"

[settings]
# Note: If you have cargo-binstall installed, this will make tool installs much faster
cargo.binstall = true

[tasks.build]
description = "Build default targets. Run with --release for a release build."
run = "cargo build --workspace"

[tasks.example]
description = "Run an example"
run = "cargo run --example {{arg(name='example', default='')}}"

[tasks.examples]
description = "Run all examples"
run = '''
for example in $(cargo build --example 2>&1 | tail -n +3); do \
  mise run example "$example"; \
done
'''

[tasks.docs]
description = "Build the API docs"
run = "cargo doc --all-features --no-deps --"

[tasks.test]
description = "Run all tests"
depends = "test:*"

[tasks.'test:unit']
description = "Run all unit tests"
run = "cargo test --all-targets --workspace"

[tasks.'test:core']
description = "Run just the core tests (much faster)"
run = "cargo test -p ${core_package}"

[tasks.check]
description = "Formatting and linting"
depends = "check:*"

[tasks.'check:rust']
run = [
  # cargo check compiles everything without the final step of code generation
  # --all-targets ensures we include --lib --bins --tests --benches --examples
  "cargo check --all-targets --workspace --all-features",
  "cargo fmt --check",
  "cargo clippy --workspace --all-targets --all-features -- -D warnings"
]

[tasks.prettier]
description = "Run prettier on all supported files"
run = '''prettier --{{arg(name='action', default='check')}} "**/*.{md,json,yml,yaml}" \
  --ignore-path ./.gitignore --ignore-path ./.markdownlintignore
'''

[tasks.'check:markdown']
run = [
  "markdownlint '**/*.md'",
  "mise prettier check"
  ]

[tasks.fix]
description = "Auto-fix formatting and linting issues"
depends = "fix:*"

[tasks.'fix:prettier']
run = "mise prettier write"

[tasks.'fix:rust']
run = [
  "cargo clippy --fix --workspace --all-targets --allow-dirty --all-features -- -D warnings",
  "cargo fmt"
]

[tasks.'fix:markdown']
run = "markdownlint --fix '**/*.md' || true"

[tasks.clean]
description = "Remove build artifacts"
run = "cargo clean"

[tasks.precommit]
description = "This is used by pre-commit (which installs git hooks)"
depends = "check"

[tasks.prepush]
description = "Check everything before pushing"
env.RUSTFLAGS = "-D warnings"
run = [
  "mise precommit",
  "mise examples",
  "mise docs",
  "mise test"
  ]

[tasks.'install:hooks']
run = "pre-commit install"
